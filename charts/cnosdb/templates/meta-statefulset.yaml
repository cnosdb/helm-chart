apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cnosdb.fullname" . }}-meta
  labels:
    app.kubernetes.io/component: cnosdb-meta
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: cnosdb-meta
  serviceName: "{{ include "cnosdb.fullname" . }}-meta"
  replicas: {{.Values.config.data.replicas | default 3}}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app.kubernetes.io/component: cnosdb-meta
      {{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      serviceAccountName: {{ include "cnosdb.serviceAccountName" . }}
      containers:
        - name: "{{ include "cnosdb.fullname" . }}-meta"
          image: "{{ .Values.image.meta.repository }}:{{ .Values.image.meta.tag }}"
          imagePullPolicy: {{ .Values.image.meta.pullPolicy | quote }}
          resources:
            requests:
              memory: "{{ .Values.resource.data.memory |  default 1 }}Gi"
              cpu: "{{ .Values.resource.data.cpu |  default 1 }}"
          ports:
          - name: udp
            containerPort: {{ .Values.config.udp.bind_address |  default 8089 }}
          - name: rpc
            containerPort: {{ .Values.config.rpc.bind_address | default 8088 }}
          - name: meta
            containerPort: {{ .Values.config.meta.bind_address | default 8091 }}
          {{- if .Values.env }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CNOSDB_HOSTNAME
              value: "$(POD_NAME).{{ include "cnosdb.fullname" . }}-meta"
          {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/ping" }}
              port: meta
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 30 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 5 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/ping" }}
              port: meta
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 5 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 1 }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.path | default "/ping" }}
              port: meta
            failureThreshold: {{ .Values.startupProbe.failureThreshold | default 6 }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds | default 5 }}
          {{- end }}
          volumeMounts:
          - name: {{ include "cnosdb.fullname" . }}-meta
            mountPath: /var/lib/cnosdb
          - name: config
            mountPath: /etc/cnosdb
          {{- if .Values.initScripts.enabled }}
          - name: init
            mountPath: /docker-entrypoint-initdb.d
          {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ include "cnosdb.fullname" . }}-meta
      {{- if .Values.initScripts.enabled }}
      - name: init
        configMap:
          name: {{ include "cnosdb.fullname" . }}-init
      {{- end }}
      {{- if (not .Values.persistence.enabled ) }}
      - name: {{ include "cnosdb.fullname" . }}-meta
        emptyDir: {}
      {{- end }}
    {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
    {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end -}}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "cnosdb.fullname" . }}-meta
        annotations:
        {{- range $key, $value := .Values.persistence.annotations }}
          {{ $key }}: "{{ $value }}"
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote}}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
